#include "llwrite.h"

void set2() {
	retry_count++;
	sending = 1;
}

int llwrite(int fd, unsigned char* data, int dataSize) {
	retry_count = 0;
	successful = 0;
	sending = 1;

	puts("Setting alarm signal...");
	signal(SIGALRM, set2); //install set routine
	puts("Alarm signal set.");

	//while(retry_count <= 3 && !successful){
	//	if(sending){
	int res = 0;
	int resSum = 0;

	//frame creation
	unsigned char Iheader[3], Itail[2], RR[5];
	Iheader[0] = F;
	Iheader[1] = A;
	Iheader[2] = C_WRITE;
	Itail[0] = Iheader[1] ^ Iheader[2];
	Itail[1] = F;

	//machine state periferal vars
	int stop = 1, estado = 0, res2;
	unsigned char c;

/*
	//stuffing
	unsigned char finalData[100];
	int i, j, lastIndex;
	//find final byte
	for(i = 0; i < dataSize; i++)
		if(data[i] == F)
			lastIndex = i;
	//init final data, changing F's
	puts("Stuffing...");
	for(i = 0, j = 0; i <= lastIndex; i++, j++)
		printf("Data index: %d\n", i);
		if(data[i] == F) {
			finalData[j] = 0x7D;
			finalData[j+1] = 0x5E;
			j++;
			lastIndex++;
		} else if(data[i] == 0x7D) {
			finalData[j] = 0x7D;
			finalData[j+1] = 0x5D;
			j++;
			lastIndex++;
		} else
			finalData[j] = data[i];
	//final byte
	finalData[j] = F;
	puts("Stuffed.");
	*/

	//sending I frame
	puts("Sending I frame...");
	printf("Data contents being sent: %s\n", data);
	res = write(fd,Iheader,3);
	resSum += res;
	if(res != -1) {
	} else {
		puts("Error 1");
		puts("Connection establishment failed.");
		return 1;
	}
/*
	res = write(fd,finalData,j+1);
	resSum += res;
	if(res != -1) {
	} else {
		puts("Error 2");
		puts("Connection establishment failed.");
		return 1;
	}
*/

	res = write(fd,data,dataSize);
	resSum += res;
	if(res != -1) {
	} else {
		puts("Error 2");
		puts("Connection establishment failed.");
		return 1;
	}


	res = write(fd,Itail,2);
	resSum += res;
	if(res != -1) {
		printf("%d bytes written\n", resSum);
	} else {
		puts("Error 3");
		puts("Connection establishment failed.");
		return 1;
	}

	alarm(3);
			
	//receiving RR frame
	puts("Reading response frame...");
	while(stop){
		res = read(fd,&c,1);
		if(res > 0) {
			printf("Estado: %d\n", estado);
			switch(estado){
				case 0: {
					printf("estado 0\n");
					if (c == F){
						RR[0] = c;
						estado = 1;
					}
					break;
				}
				case 1:{
					printf("estado 1\n");
					if (c == A){
						RR[1] = c;
							estado = 2;
					} else if (c == F){
						estado = 1;
						RR[0] = c;
					} else 
						estado = 0;
					break;	
				}
				case 2:{				
					printf("estado 2\n");
					if (c == C_RR){
						RR[2] = c;
						estado = 3;
					} else if (c == C_REJ) {
						RR[2] = c;
						estado = 5;
					} else if (c == F){
						RR[0] = c;
						estado = 1;
					} else
						estado = 0; 
					break;
				}
				case 3:{
					printf("estado 3\n");
					if (c == (RR[1] ^ RR[2])){
						RR[3] = c;
						estado = 4;
						puts("xoring");
					} else if (c == F){
						RR[0] = c;
						estado = 1;
					} else 
						estado = 0;
					printf("End of state3\n");
					printf("Final state: %d\n", estado);
					break;
				}
				case 4:{
					printf("estado 4\n");
					if (c == F){
						RR[4] = c;
						if (RR[0] == F && RR[1] == A && RR[2] == C_RR && RR[3] == (RR[1] ^ RR[2]) && RR[4] == F){
							puts("Received RR frame successfully.");
							stop = 0;
							successful = 1;
							alarm(0);
							puts("Finished reading.");
							break;
						} else {
							puts("RR frame is wrong, somehow.");
							estado = 0;
						}
					} else
						estado = 0;
					break;
				}
				case 5:{
					puts("estado 5");
					if (c == F){
						RR[4] = c;
						if (RR[0] == F && RR[1] == A && RR[2] == C_REJ && RR[3] == (RR[1] ^ RR[2]) && RR[4] == F){
							puts("Received REJ frame successfully.");
							stop = 0;
							puts("Finished reading.");
							break;
						} else {
							puts("REJ frame is wrong, somehow.");
							estado = 0;
						}
					} else
						estado = 0;
					break;
				}
			}
		}

		//if(estado == 4 || estado == 5)
		//	break;
	}
		sending = 0;
	//}//if sending
	//}//while retry count and successfull

	return 0;
}
